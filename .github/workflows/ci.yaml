name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run tests
        run: |
          chmod +x test.sh
          ./test.sh

      - name: Skip deployment in local runs
        if: ${{ env.ACT }}
        run: echo "Skipping GitHub Pages deployment in local run"

      - name: Deploy to GitHub Pages
        if: ${{ !env.ACT && github.ref == 'refs/heads/master' }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  release:
    name: Release
    needs: test
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
    steps:
      - name: Skip release in local runs
        if: ${{ env.ACT }}
        run: |
          echo "Skipping release job in local run"
          exit 0

      - name: Checkout code
        if: ${{ !env.ACT }}
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Generate changelog
        if: ${{ !env.ACT }}
        id: changelog
        uses: metcalfc/changelog-generator@v4.1.0
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        if: ${{ !env.ACT }}
        id: bump_version
        run: |
          # Read current version
          CURRENT_VERSION=$(cat VERSION)
          
          # Determine version bump type from PR labels
          if [[ "${{ github.event.pull_request.labels.* }}" == *"version/major"* ]]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1+1".0.0"}')
          elif [[ "${{ github.event.pull_request.labels.* }}" == *"version/patch"* ]]; then
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."$3+1"}')
          else
            # Default to minor version bump
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2+1".0"}')
          fi
          
          # Update version file
          echo $NEW_VERSION > VERSION
          
          # Output new version
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        if: ${{ !env.ACT }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
