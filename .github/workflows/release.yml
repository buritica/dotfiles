name: release

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

jobs:
  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current version from Git tags
        id: get_version
        run: |
          git fetch --tags
          VERSION=$(git tag --sort=-v:refname | head -n 1 | sed 's/^v//')
          echo "Current version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine bump type
        id: bump
        run: |
          LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | jq -r '.[].name')
          echo "PR Labels: $LABELS"

          BUMP="minor"
          if echo "$LABELS" | grep -q "version/major"; then
            BUMP="major"
          elif echo "$LABELS" | grep -q "version/patch"; then
            BUMP="patch"
          fi

          echo "Chosen bump: $BUMP"
          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Bump version
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.version }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "${{ steps.bump.outputs.bump }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get PR info
        id: pr_info
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "PR Title: $PR_TITLE"
          echo "PR Number: $PR_NUMBER"
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new_version }}
          PR_TITLE=${{ steps.pr_info.outputs.pr_title }}
          PR_NUMBER=${{ steps.pr_info.outputs.pr_number }}
          DATE=$(date +"%Y-%m-%d")

          echo -e "## v$NEW_VERSION - $DATE\n\n- $PR_TITLE (#$PR_NUMBER)\n" > temp_changelog
          if [ -f CHANGELOG.md ]; then
            cat CHANGELOG.md >> temp_changelog
          fi
          mv temp_changelog CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.new_version.outputs.new_version }}
          name: Release v${{ steps.new_version.outputs.new_version }}
          generate_release_notes: true

      - name: Push tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.new_version.outputs.new_version }}
          git push origin v${{ steps.new_version.outputs.new_version }}
