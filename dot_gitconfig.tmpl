[hub]
  protocol = https

[credential]
  helper = osxkeychain

[user]
  name = Juan Pablo Buriticá
  email = buritica@gmail.com

[core]
  editor = code --wait
  pager = less -F -X
  autocrlf = input
  excludesfile = ~/.gitignore

[init]
  defaultBranch = main

[push]
  default = simple
  autoSetupRemote = true

[pull]
  rebase = false

[rebase]
  autoStash = true

[merge]
  ff = only
  commit = no

[github]
  user = buritica

[ghi]
  token = !security find-internet-password -a buritica -s github.com -l 'ghi token' -w

[alias]
  # Basic shortcuts
  s = status -s
  st = status
  co = checkout
  br = branch
  ci = commit
  unstage = reset HEAD --
  last = log -1 HEAD

  # Logging
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  lc = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  # Diff
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  dc = diff --cached
  dw = diff --word-diff
  ds = diff --staged

  # Branch management
  b = branch
  ba = branch -a
  bd = branch -d
  bD = branch -D
  bm = branch -m
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  gb = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
  gba = branch -a
  gbd = branch -d
  gbD = branch -D
  gbm = branch -m

  # Remote management
  r = remote -v
  ra = remote add
  rr = remote remove
  rv = remote -v

  # Stash management
  sl = stash list
  sa = stash apply
  sp = stash pop
  ss = stash save

  # Submodule management
  p = !"git pull; git submodule foreach git pull origin master"
  c = clone --recursive
  su = submodule update --init --recursive

  # Commit management
  ca = !git add -A && git commit -av
  cm = commit -m
  amend = commit --amend --no-edit
  amendm = commit --amend -m
  undo = reset --soft HEAD^

  # Tag management
  tags = tag -l
  t = tag -l
  ta = tag -a
  td = tag -d

  # Cleanup
  cleanup = "!git branch --merged | grep -v '\\*\\|main\\|master' | xargs -n 1 git branch -d"
  prune = remote prune origin
  prune-local = "!git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d"

  # Work in progress
  wip = "!git add . && git commit -m 'WIP'"
  unwip = "!git log -n 1 | grep -q -c 'WIP' && git reset HEAD~1"

  # GitHub specific
  pr = "!f() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; f"
  issues = "!ghi list"
  issue = "!ghi show"
  create-issue = "!ghi create"

  # Git flow shortcuts
  feature = "!git flow feature"
  hotfix = "!git flow hotfix"
  release = "!git flow release"
  support = "!git flow support"

  # Debug
  debug = "!git rev-parse --show-toplevel && git rev-parse --git-dir && git rev-parse --show-cdup"

[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = true

[diff]
  # Detect copies as well as renames
  renames = copies

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

# URL shorthands
[url "git@github.com:"]
  insteadOf = https://github.com/

[url "git@gitlab.com:"]
  insteadOf = https://gitlab.com/

[url "git@bitbucket.org:"]
  insteadOf = https://bitbucket.org/

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

{{ if eq .chezmoi.arch "arm64" }}
[credential "https://github.com"]
  helper =
  helper = !/opt/homebrew/bin/gh auth git-credential
{{ else }}
{{ end }}
